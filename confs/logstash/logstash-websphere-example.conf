input {
  file {
    path => ["/vagrant/example-logs/metonline/PROD1/*.log"]
    start_position => "beginning"
	add_field => { "source" => "PROD1" }
    type => "websphere"
  }
}

filter {

	if [path] =~ "SystemOut" {
		mutate { replace => { "type" => "SystemOut" } }
		multiline {
			patterns_dir => "/vagrant/confs/logstash/grokpatterns"
			pattern => "\[%{DATE}"
			negate => true
			what => "previous"
		   }
		grok {
			patterns_dir => "/vagrant/confs/logstash/grokpatterns"
			break_on_match => false
			match => ["message", "\S%{TimeDate}\S %{WORD:EventCode} %{WORD:EventType}\s*%{WORD:ReadWriteOperation}\s%{GREEDYDATA:Description}"]
		}
		date{
			match => ["TimeDate", "MM/dd/YY HH:mm:ss:SSS zzz", "M/d/YY HH:mm:ss:SSS zzz", "MM/d/YY HH:mm:ss:SSS zzz", "M/dd/YY HH:mm:ss:SSS zzz", "MM/dd/YY H:mm:ss:SSS zzz", "M/d/YY H:mm:ss:SSS zzz", "MM/d/YY H:mm:ss:SSS zzz", "M/dd/YY H:mm:ss:SSS zzz"]
		}

	}
	
	if [path] =~ "logFile" {
		mutate { replace => { "type" => "logFile" } }

		multiline {
			patterns_dir => "/vagrant/confs/logstash/grokpatterns"
			pattern => "%{TIMESTAMP_ISO8601:eventts}"
			negate => true
			what => "previous"
		   }
	    grok {
			patterns_dir => "/vagrant/confs/logstash/grokpatterns"
			break_on_match => false
			match => ["message", "%{TIMESTAMP_ISO8601:eventts} \[(?<thread>[^\]]+)\] %{LOGLEVEL:loglevel}\s*%{IPORHOST:clientip}%{SPACE}(%{SESSION_DETAILS}|\-)?\s*(?<username>\S*) (?<metref>\S*) (?<session>\S*) (?<channel>\S*) (?<logger>\S+) \- %{GREEDYDATA:msg}"]
		}
		
		if "_grokparsefailure" in [tags] {
			drop { }
		}

	}

}

output {

  stdout { codec => rubydebug }
}


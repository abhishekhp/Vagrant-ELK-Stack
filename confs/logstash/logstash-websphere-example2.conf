input {
  file {
    path => ["/vagrant/example-logs/metonline/PROD1/logFile.log"]
    start_position => "beginning"

    type => "websphere"
	add_field => { "source" => "PROD1" }
  }
}

filter {
	if [type] == "websphere" {

		multiline {
			patterns_dir => "/vagrant/confs/logstash/grokpatterns"
			pattern => "%{TIMESTAMP_ISO8601}"
			negate => true
			what => "previous"
		   }
	    grok {
			patterns_dir => "/vagrant/confs/logstash/grokpatterns"
			break_on_match => false
			match => ["message", "%{TIMESTAMP_ISO8601:timestamp} \[(?<thread>[^\]]+)\] %{LOGLEVEL:loglevel}\s*%{IPORHOST:clientip}%{SPACE}(%{SESSION_DETAILS}|\-)?\s*(?<username>\S*) (?<metref>\S*) (?<session>\S*) (?<channel>\S*) (?<logger>\S+) \- %{GREEDYDATA:msg}"]
		}
		
		if "_grokparsefailure" in [tags] {
			drop { }
		}
		
        date {
            match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
            remove_field => [ "timestamp" ]
        }
		

		
		if "_dateparsefailure" in [tags] {
			drop { }
		}
	}

}

output {
  elasticsearch {
    document_type => "example"
    host => "127.0.0.1"
    cluster => "vagrant_elasticsearch"
    protocol => "http"
  }
}

